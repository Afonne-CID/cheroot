[tox]
envlist = python
minversion = 3.13.2

[testenv]
deps =
    # Needed to avoid DeprecationWarning errors in pytest
    setuptools>=40.4.3
    # Possible workaround for errors in Travis CI under some Pythons
    pip>=19.1
    wheel
commands_pre =
    {envpython} -m \
      OpenSSL.debug
commands =
    {envpython} -m \
      pytest \
      {tty:--color=yes} \
      {posargs:}
    codecov -f coverage.xml -X gcov
usedevelop = True
extras = testing

passenv =
    WEBTEST_INTERACTIVE
    CI
    TRAVIS
    TRAVIS_*
    APPVEYOR
    APPVEYOR_*
    CIRCLECI
    CIRCLE_*
    PYTHONDONTWRITEBYTECODE
    PYTEST_*
    SSH_AUTH_SOCK
    GITHUB_*
    CODECOV_TOKEN
setenv =
    CRYPTOGRAPHY_ALLOW_OPENSSL_102=x
    PYTHONDONTWRITEBYTECODE=x
    WEBTEST_INTERACTIVE=false

[testenv:build-docs]
basepython = python3.8
description = Build The Docs
changedir = docs
commands_pre =
commands =
    # Retrieve possibly missing commits:
    -git fetch --unshallow
    -git fetch --tags

    # Build docs site:
    python -m sphinx \
      -j auto \
      -a -n -W \
      --keep-going \
      -b html \
      {tty:--color} \
      -d "{toxworkdir}/docs_doctree" \
      . "{toxworkdir}/docs_out"

    # Print out the output docs dir and a way to serve html:
    python -c\
    'import pathlib;\
    docs_dir = pathlib.Path(r"{toxworkdir}") / "docs_out";\
    index_file = docs_dir / "index.html";\
    print(f"\nDocumentation available under\
    `file://\{index_file\}`\n\nTo serve docs, use\
    `python3 -m http.server --directory \
    \N\{QUOTATION MARK\}\{docs_dir\}\N\{QUOTATION MARK\} 0`\n")'
extras =
    docs
    testing
whitelist_externals =
    git

[testenv:doctest-docs]
basepython = {[testenv:build-docs]basepython}
description = Doctest The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
commands =
    # Retrieve possibly missing commits:
    -git fetch --unshallow
    -git fetch --tags

    # Spellcheck docs site:
    python -m sphinx \
      -j auto \
      -a -n -W \
      --keep-going \
      -b doctest --color \
      -d "{toxworkdir}/docs_doctree" \
      . "{toxworkdir}/docs_out"
extras =
    {[testenv:build-docs]extras}
whitelist_externals =
    {[testenv:build-docs]whitelist_externals}

[testenv:linkcheck-docs]
basepython = {[testenv:build-docs]basepython}
description = Linkcheck The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
commands =
    # Retrieve possibly missing commits:
    -git fetch --unshallow
    -git fetch --tags

    # Spellcheck docs site:
    python -m sphinx \
      -j auto \
      -a -n -W \
      --keep-going \
      -b linkcheck --color \
      -d "{toxworkdir}/docs_doctree" \
      . "{toxworkdir}/docs_out"
extras =
    {[testenv:build-docs]extras}
whitelist_externals =
    {[testenv:build-docs]whitelist_externals}

[testenv:spellcheck-docs]
basepython = {[testenv:build-docs]basepython}
description = Spellcheck The Docs
changedir = {[testenv:build-docs]changedir}
commands_pre =
commands =
    # Retrieve possibly missing commits:
    -git fetch --unshallow
    -git fetch --tags

    # Spellcheck docs site:
    python -m sphinx \
      -j auto \
      -a -n -W \
      --keep-going \
      -b spelling --color \
      -d "{toxworkdir}/docs_doctree" \
      . "{toxworkdir}/docs_out"
deps =
    {[testenv]deps}
    sphinxcontrib-spelling>=5.2.0
extras =
    {[testenv:build-docs]extras}
whitelist_externals =
    {[testenv:build-docs]whitelist_externals}

[testenv:watch]
commands = ptw --runner=pytest

[testenv:pre-commit]
deps =
    {[testenv]deps}
    pre-commit
commands_pre =
commands = pre-commit run --all-files --show-diff-on-failure {posargs}

[testenv:pre-commit-failing]
deps =
    {[testenv:pre-commit]deps}
    flake8-2020
    flakehell
    wemake-python-styleguide
commands_pre =
commands = pre-commit run --config .pre-commit-config.yaml.failing --all-files --show-diff-on-failure {posargs:}

[testenv:setup-check]
deps =
    setuptools-scm
    twine
usedevelop = False
commands_pre =
commands =
    python -m twine check .tox/dist/*
    python -m setuptools_scm ls


[testenv:cleanup-dists]
description =
  Wipe the the dist/ folder
usedevelop = false
skip_install = true
deps =
commands_pre =
commands =
  {envpython} -c \
    "import shutil, sys; \
    shutil.rmtree(sys.argv[1], ignore_errors=True)" \
    {toxinidir}/dist/


[testenv:build-dists]
description =
  Build dists and put them into the dist/ folder
depends =
  cleanup-dists
skip_install = true
# Starting with build v0.5.0, it builds wheel from sdist
# if no format arguments are passed. This makes sure that
# wheels are not dependent on the Git repo or anything
# external what may be missing from sdist.
deps =
  build >= 0.5.0, < 0.6.0
commands_pre =
commands =
  {envpython} -m build \
    --outdir '{toxinidir}/dist/' \
    {posargs} \
    '{toxinidir}'


[testenv:metadata-validation]
description =
  Verify that dists under the `dist/`
  dir have valid metadata
depends =
  build-dists
deps =
  twine
skip_install = true
commands_pre =
commands =
  {envpython} -m \
    twine check \
    {toxinidir}/dist/*

[testenv:release]
skip_install = True
deps =
    pep517>=0.5
    twine>=1.13
    path.py
passenv =
    TWINE_PASSWORD
setenv =
    TWINE_USERNAME = {env:TWINE_USERNAME:__token__}
commands_pre =
commands =
    python -c "import path; path.Path('dist').rmtree_p()"
    python -m pep517.build .
    python -m twine upload dist/*
