---

name: pip-tools

on:   # yamllint disable-line rule:truthy
  workflow_dispatch:
  schedule:
  - cron: 1 0 * * *  # Run daily at 0:01 UTC

concurrency:
  group: >-
    ${{
        github.workflow
    }}-${{
        github.event.pull_request.number || github.sha
    }}
  cancel-in-progress: true

jobs:

  deps:
    name: >-
      ⛓🔒 🐍${{
          matrix.python-version
      }} @ ${{
          matrix.os
      }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
        # NOTE: The latest and the lowest supported Pythons are prioritized
        # NOTE: to improve the responsiveness. It's nice to see the most
        # NOTE: important results first.
        - >-
          3.10
        - pypy2
        - 3.9
        - 3.8
        - pypy-3.7
        - 3.7
        - 3.6
        - 3.5
        - 2.7
        - 3.11.0-alpha - 3.11.0
        - pypy-3.6
        os:
        - ubuntu-18.04
        - macOS-11.0
        - windows-2016
        exclude:
        # NOTE: macOS PyPy 3.6 job is excluded because during
        # NOTE: self-provisioning, invoking `ensurepip` fails to load
        # NOTE: some CFFI libs with a traceback saying
        # NOTE: `AttributeError: No symbol SCDynamicStoreCopyProxies
        # NOTE: found in library <None>`
        - os: macOS-11.0
          python-version: pypy-3.6
        include:
        # NOTE: The only GNU/Linux CPython 3.4 available is built for Ubuntu 18
        # https://github.com/actions/python-versions/blob/c483657/versions-manifest.json#L1228
        - os: ubuntu-18.04
          python-version: 3.4

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
      PIP_NO_WARN_SCRIPT_LOCATION: 1
      PY_COLORS: 1

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Upgrade pip with `requires_python`
      run: >-
        python -m
        pip install
        --user
        --upgrade
        --force-reinstall
        pip-with-requires-python
    - name: Install pip-tools
      run: >-
        python -m
        pip install
        --user
        pip-tools

    - name: Grab the source from Git
      uses: actions/checkout@v2
    - name: Setup git user as [bot]
      # Refs:
      # * https://github.community/t/github-actions-bot-email-address/17204/6
      # * https://github.com/actions/checkout/issues/13#issuecomment-724415212
      uses: fregante/setup-git-user@v1.0.1

    - name: Generate constraints files
      run: >
        BASE_NAME=$(
        PYTHONPATH=bin/ python -c
        'from pip_constraint_helpers import get_constraint_file_path,
        get_runtime_python_tag;
        print(get_constraint_file_path(
        "", "py", get_runtime_python_tag())[:-4]
        )
        '
        )


        (cd requirements/; ln -svf tests.in "${BASE_NAME}.in")


        python -m piptools compile
        --allow-unsafe
        --output-file="requirements/${BASE_NAME}.txt"
        ${{
        (
        matrix.python-version != '2.7'
        && matrix.python-version != '3.4'
        && matrix.python-version != '3.5'
        && matrix.python-version != 'pypy2'
        )
        && '--strip-extras'
        || ''
        }}
        "requirements/${BASE_NAME}.in"


        git add requirements/


        git commit -m "Update ${BASE_NAME} constraints" requirements/
        || :
      shell: bash

    - name: Create a patch from the last Git commit
      run: >-
        git format-patch
        --output-directory='${{ runner.temp }}/patches/'
        -1
        HEAD
    - name: Save the package bump patch as a GHA artifact
      uses: actions/upload-artifact@v2
      with:
        name: pip-constraints-git-patches
        path: ${{ runner.temp }}/patches/

  check:  # This job does nothing and is only used for the branch protection
    if: always()

    needs:
    - deps

    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  publish-pr:
    name: Open/refresh a PR
    needs:
    - check
    runs-on: Ubuntu-latest

    environment: pip-tools

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v2
      with:
        name: pip-constraints-git-patches
        path: ${{ runner.temp }}/patches/
    - name: Grab the source from Git
      uses: actions/checkout@v2
    - name: List Git patches
      run: ls -alh '${{ runner.temp }}/patches/'
    - name: Apply patches to the Git repo
      run: git am '${{ runner.temp }}/patches'/*.patch

...
